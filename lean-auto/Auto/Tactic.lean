import Lean
import Auto.Translation
import Auto.Solver.SMT
import Auto.Solver.TPTP
import Auto.Solver.Native
import Auto.HintDB
open Lean Elab Tactic

initialize
  registerTraceClass `auto.tactic
  registerTraceClass `auto.printLemmas

namespace Auto

syntax hintelem := term <|> "*"
syntax hints := ("[" hintelem,* "]")?
/-- Specify constants to unfold. `unfolds` Must not contain cyclic dependency -/
syntax unfolds := "u[" ident,* "]"
/-- Specify constants to collect definitional equality for -/
syntax defeqs := "d[" ident,* "]"
syntax uord := atomic(unfolds) <|> defeqs
syntax autoinstr := ("üëç" <|> "üëé")?
syntax (name := auto) "auto" autoinstr hints (uord)* : tactic
syntax (name := mononative) "mononative" hints (uord)* : tactic
syntax (name := intromono) "intromono" hints (uord)* : tactic

inductive Instruction where
  | none
  | useSorry

def parseInstr : TSyntax ``Auto.autoinstr ‚Üí TacticM Instruction
| `(autoinstr|) => return .none
| `(autoinstr|üëç) => throwError "Your flattery is appreciated üòé"
| `(autoinstr|üëé) => do
  logInfo "I'm terribly sorry. A 'sorry' is sent to you as compensation."
  return .useSorry
| _ => throwUnsupportedSyntax

inductive HintElem where
  -- A user-provided term
  | term     : Term ‚Üí HintElem
  -- Hint database, not yet supported
  | hintdb   : HintElem
  -- `*` adds all hypotheses in the local context
  -- Also, if `[..]` is not supplied to `auto`, all
  --   hypotheses in the local context are
  --   automatically collected.
  | lctxhyps : HintElem
deriving Inhabited, BEq

def parseHintElem : TSyntax ``hintelem ‚Üí TacticM HintElem
| `(hintelem| *)       => return .lctxhyps
| `(hintelem| $t:term) => return .term t
| _ => throwUnsupportedSyntax

structure InputHints where
  terms    : Array Term := #[]
  hintdbs  : Array Unit := #[]
  lctxhyps : Bool       := false
deriving Inhabited, BEq

/-- Parse `hints` to an array of `Term`, which is still syntax -/
def parseHints : TSyntax ``hints ‚Üí TacticM InputHints
| `(hints| [ $[$hs],* ]) => do
  let mut terms := #[]
  let mut lctxhyps := false
  let elems ‚Üê hs.mapM parseHintElem
  for elem in elems do
    match elem with
    | .term t => terms := terms.push t
    | .lctxhyps => lctxhyps := true
    | _ => throwError "parseHints :: Not implemented"
  return ‚ü®terms, #[], lctxhyps‚ü©
| `(hints| ) => return ‚ü®#[], #[], true‚ü©
| _ => throwUnsupportedSyntax

private def defeqUnfoldErrHint :=
  "Note that auto does not accept defeq/unfold hints which" ++
  "are let-declarations in the local context, because " ++
  "let-declarations are automatically unfolded by auto."

def parseUnfolds : TSyntax ``unfolds ‚Üí TacticM (Array Prep.ConstUnfoldInfo)
| `(unfolds| u[ $[$hs],* ]) => do
  let exprs ‚Üê hs.mapM (fun i => do
    let some expr ‚Üê Term.resolveId? i
      | throwError "parseUnfolds :: Unknown identifier {i}. {defeqUnfoldErrHint}"
    return expr)
  exprs.mapM (fun expr => do
    let some name := expr.constName?
      | throwError "parseUnfolds :: Unknown declaration {expr}. {defeqUnfoldErrHint}"
    Prep.getConstUnfoldInfo name)
| _ => throwUnsupportedSyntax

def parseDefeqs : TSyntax ``defeqs ‚Üí TacticM (Array Name)
| `(defeqs| d[ $[$hs],* ]) => do
  let exprs ‚Üê hs.mapM (fun i => do
    let some expr ‚Üê Term.resolveId? i
      | throwError "parseDefeqs :: Unknown identifier {i}. {defeqUnfoldErrHint}"
    return expr)
  exprs.mapM (fun expr => do
    let some name := expr.constName?
      | throwError "parseDefeqs :: Unknown declaration {expr}. {defeqUnfoldErrHint}"
    return name)
| _ => throwUnsupportedSyntax

def parseUOrD : TSyntax ``uord ‚Üí TacticM (Array Prep.ConstUnfoldInfo ‚äï Array Name)
| `(uord| $unfolds:unfolds) => Sum.inl <$> parseUnfolds unfolds
| `(uord| $defeqs:defeqs) => Sum.inr <$> parseDefeqs defeqs
| _ => throwUnsupportedSyntax

def parseUOrDs (stxs : Array (TSyntax ``uord)) : TacticM (Array Prep.ConstUnfoldInfo √ó Array Name) := do
  let mut hasUnfolds := false
  let mut hasDefeqs := false
  let mut unfolds := #[]
  let mut defeqs := #[]
  for stx in stxs do
    match ‚Üê parseUOrD stx with
    | .inl u =>
      if hasUnfolds then
        throwError "Auto :: Duplicated unfold hint"
      hasUnfolds := true
      unfolds := u
    | .inr d =>
      if hasDefeqs then
        throwError "Auto :: Duplicated defeq hint"
      hasDefeqs := true
      defeqs := defeqs.append d
  return (unfolds, defeqs)

def collectLctxLemmas (lctxhyps : Bool) (ngoalAndBinders : Array FVarId) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let fVarIds := (if lctxhyps then (‚Üê getLCtx).getFVarIds else ngoalAndBinders)
    let mut lemmas := #[]
    for fVarId in fVarIds do
      let decl ‚Üê FVarId.getDecl fVarId
      let type ‚Üê instantiateMVars decl.type
      if ‚Üê Prep.isNonemptyInhabited type then
        continue
      if ¬¨ decl.isAuxDecl ‚àß (‚Üê Meta.isProp type) then
        lemmas := lemmas.push ‚ü®mkFVar fVarId, type, #[]‚ü©
    return lemmas

def collectUserLemmas (terms : Array Term) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let mut lemmas := #[]
    for ‚ü®proof, type, params‚ü© in ‚Üê terms.mapM Prep.elabLemma do
      if ‚Üê Prep.isNonemptyInhabited type then
        throwError "invalid lemma {type}, lemmas should not be inhabitation facts"
      else if ‚Üê Meta.isProp type then
        lemmas := lemmas.push ‚ü®proof, ‚Üê instantiateMVars type, params‚ü©
      else
        -- **TODO**: Relax condition?
        throwError "invalid lemma {type} for auto, proposition expected"
    return lemmas

def collectDefeqLemmas (names : Array Name) : TacticM (Array Lemma) :=
  Meta.withNewMCtxDepth do
    let lemmas ‚Üê names.concatMapM Prep.elabDefEq
    lemmas.mapM (fun (‚ü®proof, type, params‚ü© : Lemma) => do
      let type ‚Üê instantiateMVars type
      return ‚ü®proof, type, params‚ü©)

def unfoldConstAndPreprocessLemma (unfolds : Array Prep.ConstUnfoldInfo) (lem : Lemma) : MetaM Lemma := do
  let type ‚Üê prepReduceExpr (‚Üê instantiateMVars lem.type)
  let type := Prep.unfoldConsts unfolds type
  let type ‚Üê Core.betaReduce (‚Üê instantiateMVars type)
  let lem := {lem with type := type}
  let lem ‚Üê lem.reorderForallInstDep
  return lem

/--
  We assume that all defeq facts have the form
    `‚àÄ (x‚ÇÅ : ‚ãØ) ‚ãØ (x‚Çô : ‚ãØ), c ... = ...`
  where `c` is a constant. To avoid `whnf` from reducing
  `c`, we call `forallTelescope`, then call `prepReduceExpr`
  on
  ¬∑ All the arguments of `c`, and
  ¬∑ The right-hand side of the equation
-/
def unfoldConstAndprepReduceDefeq (unfolds : Array Prep.ConstUnfoldInfo) (lem : Lemma) : MetaM Lemma := do
  let .some type ‚Üê prepReduceDefeq (‚Üê instantiateMVars lem.type)
    | throwError "unfoldConstAndprepReduceDefeq :: Unrecognized definitional equation {lem.type}"
  let type := Prep.unfoldConsts unfolds type
  let type ‚Üê Core.betaReduce (‚Üê instantiateMVars type)
  let lem := {lem with type := type}
  let lem ‚Üê lem.reorderForallInstDep
  return lem

def traceLemmas (pre : String) (lemmas : Array Lemma) : TacticM Unit := do
  let mut cnt : Nat := 0
  let mut mdatas : Array MessageData := #[]
  for lem in lemmas do
    mdatas := mdatas.push m!"\n{cnt}: {lem}"
    cnt := cnt + 1
  trace[auto.printLemmas] mdatas.foldl MessageData.compose pre

def checkDuplicatedFact (terms : Array Term) : TacticM Unit :=
  let n := terms.size
  for i in [0:n] do
    for j in [i+1:n] do
      if terms[i]? == terms[j]? then
        throwError "Auto does not accept duplicated input terms"

def collectAllLemmas
  (hintstx : TSyntax ``hints) (uords : Array (TSyntax `Auto.uord)) (ngoalAndBinders : Array FVarId) :
  -- The first `Array Lemma` are `Prop` lemmas
  -- The second `Array Lemma` are Inhabitation facts
  TacticM (Array Lemma √ó Array Lemma) := do
  let inputHints ‚Üê parseHints hintstx
  let (unfoldInfos, defeqNames) ‚Üê parseUOrDs uords
  let unfoldInfos ‚Üê Prep.topoSortUnfolds unfoldInfos
  let startTime ‚Üê IO.monoMsNow
  let lctxLemmas ‚Üê collectLctxLemmas inputHints.lctxhyps ngoalAndBinders
  let lctxLemmas ‚Üê lctxLemmas.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas "Lemmas collected from local context:" lctxLemmas
  checkDuplicatedFact inputHints.terms
  let userLemmas ‚Üê collectUserLemmas inputHints.terms
  let userLemmas ‚Üê userLemmas.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas "Lemmas collected from user-provided terms:" userLemmas
  let defeqLemmas ‚Üê collectDefeqLemmas defeqNames
  let defeqLemmas ‚Üê defeqLemmas.mapM (m:=MetaM) (unfoldConstAndprepReduceDefeq unfoldInfos)
  traceLemmas "Lemmas collected from user-provided defeq hints:" defeqLemmas
  trace[auto.tactic] "Preprocessing took {(‚Üê IO.monoMsNow) - startTime}ms"
  let inhFacts ‚Üê Inhabitation.getInhFactsFromLCtx
  let inhFacts ‚Üê inhFacts.mapM (m:=MetaM) (unfoldConstAndPreprocessLemma unfoldInfos)
  traceLemmas "Inhabitation lemmas :" inhFacts
  return (lctxLemmas ++ userLemmas ++ defeqLemmas, inhFacts)

open Embedding.Lam in
/--
  If TPTP succeeds, return unsat core
  If TPTP fails, return none
-/
def queryTPTP (exportFacts : Array REntry) : LamReif.ReifM (Array Embedding.Lam.REntry) := do
    let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
    let lamEVarTy ‚Üê LamReif.getLamEVarTy
    let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
      match re with
      | .valid [] t => return t
      | _ => throwError "runAuto :: Unexpected error")
    let query ‚Üê lam2TH0 lamVarTy lamEVarTy exportLamTerms
    trace[auto.tptp.printQuery] "\n{query}"
    let tptpProof ‚Üê Solver.TPTP.querySolver query
    try
      let proofSteps ‚Üê Parser.TPTP.getProof lamVarTy lamEVarTy tptpProof
      for step in proofSteps do
        trace[auto.tptp.printProof] "{step}"
    catch e =>
      trace[auto.tptp.printProof] "TPTP proof reification failed with {e.toMessageData}"
    let unsatCore ‚Üê Parser.TPTP.unsatCore tptpProof
    let mut ret := #[]
    for n in unsatCore do
      let .some re := exportFacts[n]?
        | throwError "queryTPTP :: Index {n} out of range"
      ret := ret.push re
    return ret

open Embedding.Lam in
def querySMT (exportFacts : Array REntry) (exportInds : Array MutualIndInfo) : LamReif.ReifM (Option Expr) := do
  let lamVarTy := (‚Üê LamReif.getVarVal).map Prod.snd
  let lamEVarTy ‚Üê LamReif.getLamEVarTy
  let exportLamTerms ‚Üê exportFacts.mapM (fun re => do
    match re with
    | .valid [] t => return t
    | _ => throwError "runAuto :: Unexpected error")
  let commands ‚Üê (lamFOL2SMT lamVarTy lamEVarTy exportLamTerms exportInds).run'
  for cmd in commands do
    trace[auto.smt.printCommands] "{cmd}"
  let .some _ ‚Üê Solver.SMT.querySolver commands
    | return .none
  if (auto.smt.trust.get (‚Üê getOptions)) then
    logWarning "Trusting SMT solvers. `autoSMTSorry` is used to discharge the goal."
    return .some (‚Üê Meta.mkAppM ``Solver.SMT.autoSMTSorry #[Expr.const ``False []])
  else
    return .none

open Embedding.Lam in
/--
  If `prover?` is specified, use the specified one.
  Otherwise use the one determined by `Solver.Native.queryNative`
-/
def queryNative
  (declName? : Option Name) (exportFacts exportInhs : Array REntry)
  (prover? : Option (Array Lemma ‚Üí MetaM Expr) := .none) : LamReif.ReifM (Option Expr) := do
  let (proof, proofLamTerm, usedEtoms, usedInhs, unsatCore) ‚Üê
    Lam2D.callNative_checker exportInhs exportFacts (prover?.getD Solver.Native.queryNative)
  LamReif.newAssertion proof proofLamTerm
  let etomInstantiated ‚Üê LamReif.validOfInstantiateForall (.valid [] proofLamTerm) (usedEtoms.map .etom)
  let forallElimed ‚Üê LamReif.validOfElimForalls etomInstantiated usedInhs
  let contra ‚Üê LamReif.validOfImps forallElimed unsatCore
  LamReif.printValuation
  LamReif.printProofs
  Reif.setDeclName? declName?
  let checker ‚Üê LamReif.buildCheckerExprFor contra
  let contra ‚Üê Meta.mkAppM ``Embedding.Lam.LamThmValid.getFalse #[checker]
  let proof ‚Üê Meta.mkLetFVars ((‚Üê Reif.getFvarsToAbstract).map Expr.fvar) contra
  return .some proof

/--
  Run native `prover` with monomorphization and preprocessing of `auto`
-/
def runNativeProverWithAuto
  (declName? : Option Name) (prover : Array Lemma ‚Üí MetaM Expr)
  (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM Expr := do
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    let (exportFacts, _) ‚Üê LamReif.preprocess exportFacts #[]
    if let .some expr ‚Üê queryNative declName? exportFacts exportInhs prover then
      return expr
    else
      throwError "runNativeProverWithAuto :: Failed to find proof")
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let s ‚Üê get
    let u ‚Üê computeMaxLevel s.facts
    (afterReify s.facts s.inhTys).run' {u := u})
  trace[auto.tactic] "runNativeProverWithAuto :: Found proof of {‚Üê Meta.inferType proof}"
  return proof

/--
  Run `auto`'s monomorphization and preprocessing, then send the problem to different solvers
-/
def runAuto
  (declName? : Option Name) (lemmas : Array Lemma) (inhFacts : Array Lemma) : MetaM Expr := do
  -- Simplify `ite`
  let ite_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.ite_simp
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem ite_simp_lem)
  -- Simplify `decide`
  let decide_simp_lem ‚Üê Lemma.ofConst ``Auto.Bool.decide_simp
  let lemmas ‚Üê lemmas.mapM (fun lem => Lemma.rewriteUPolyRigid lem decide_simp_lem)
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) (minds : Array (Array SimpleIndVal)) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let mut exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    let exportInds ‚Üê LamReif.reifMutInds minds
    -- **Preprocessing in Verified Checker**
    let (exportFacts', exportInds) ‚Üê LamReif.preprocess exportFacts exportInds
    exportFacts := exportFacts'
    -- **TPTP invocation and Premise Selection**
    if auto.tptp.get (‚Üê getOptions) then
      let premiseSel? := auto.tptp.premiseSelection.get (‚Üê getOptions)
      let unsatCore ‚Üê queryTPTP exportFacts
      if premiseSel? then
        exportFacts := unsatCore
    -- **SMT**
    if auto.smt.get (‚Üê getOptions) then
      if let .some proof ‚Üê querySMT exportFacts exportInds then
        return proof
    -- **Native Prover**
    exportFacts := exportFacts.append (‚Üê LamReif.auxLemmas exportFacts)
    if auto.native.get (‚Üê getOptions) then
      if let .some proof ‚Üê queryNative declName? exportFacts exportInhs then
        return proof
    throwError "Auto failed to find proof"
    )
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let s ‚Üê get
    let u ‚Üê computeMaxLevel s.facts
    (afterReify s.facts s.inhTys s.inds).run' {u := u})
  trace[auto.tactic] "Auto found proof of {‚Üê Meta.inferType proof}"
  return proof

@[tactic auto]
def evalAuto : Tactic
| `(auto | auto $instr $hints $[$uords]*) => withMainContext do
  let startTime ‚Üê IO.monoMsNow
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "evalAuto :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let instr ‚Üê parseInstr instr
    match instr with
    | .none =>
      let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
      let declName? ‚Üê Elab.Term.getDeclName?
      let proof ‚Üê runAuto declName? lemmas inhFacts
      IO.println s!"Auto found proof. Time spent by auto : {(‚Üê IO.monoMsNow) - startTime}ms"
      absurd.assign proof
    | .useSorry =>
      let proof ‚Üê Meta.mkAppM ``sorryAx #[Expr.const ``False [], Expr.const ``false []]
      absurd.assign proof
| _ => throwUnsupportedSyntax

@[tactic intromono]
def evalIntromono : Tactic
| `(intromono | intromono $hints $[$uords]*) => withMainContext do
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "evalAuto :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let (lemmas, _) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
    let newMid ‚Üê Monomorphization.intromono lemmas absurd
    replaceMainGoal [newMid]
| _ => throwUnsupportedSyntax

/--
  A monomorphization interface that can be invoked by repos dependent
    on `lean-auto`.
  **TODO: Change `prover : Array Lemma ‚Üí MetaM Expr` to have type `proverName : String`**
-/
def monoInterface
  (lemmas : Array Lemma) (inhFacts : Array Lemma)
  (prover : Array Lemma ‚Üí MetaM Expr) : MetaM Expr := do
  let afterReify (uvalids : Array UMonoFact) (uinhs : Array UMonoFact) : LamReif.ReifM Expr := (do
    let exportFacts ‚Üê LamReif.reifFacts uvalids
    let exportFacts := exportFacts.map (Embedding.Lam.REntry.valid [])
    let _ ‚Üê LamReif.reifInhabitations uinhs
    let exportInhs := (‚Üê LamReif.getRst).nonemptyMap.toArray.map
      (fun (s, _) => Embedding.Lam.REntry.nonempty s)
    let proof ‚Üê Lam2D.callNative_direct exportInhs exportFacts prover
    Meta.mkLetFVars ((‚Üê Reif.getFvarsToAbstract).map Expr.fvar) proof)
  let (proof, _) ‚Üê Monomorphization.monomorphize lemmas inhFacts (@id (Reif.ReifM Expr) do
    let uvalids ‚Üê liftM <| Reif.getFacts
    let uinhs ‚Üê liftM <| Reif.getInhTys
    let u ‚Üê computeMaxLevel uvalids
    (afterReify uvalids uinhs).run' {u := u})
  return proof

@[tactic mononative]
def evalMonoNative : Tactic
| `(mononative | mononative $hints $[$uords]*) => withMainContext do
  let startTime ‚Üê IO.monoMsNow
  -- Suppose the goal is `‚àÄ (x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô), G`
  -- First, apply `intros` to put `x‚ÇÅ x‚ÇÇ ‚ãØ x‚Çô` into the local context,
  --   now the goal is just `G`
  let (goalBinders, newGoal) ‚Üê (‚Üê getMainGoal).intros
  let [nngoal] ‚Üê newGoal.apply (.const ``Classical.byContradiction [])
    | throwError "evalAuto :: Unexpected result after applying Classical.byContradiction"
  let (ngoal, absurd) ‚Üê MVarId.intro1 nngoal
  replaceMainGoal [absurd]
  withMainContext do
    let (lemmas, inhFacts) ‚Üê collectAllLemmas hints uords (goalBinders.push ngoal)
    let proof ‚Üê monoInterface lemmas inhFacts Solver.Native.queryNative
    IO.println s!"Auto found proof. Time spent by auto : {(‚Üê IO.monoMsNow) - startTime}ms"
    absurd.assign proof
| _ => throwUnsupportedSyntax

end Auto
